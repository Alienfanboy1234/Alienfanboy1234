local camera = game.Workspace.CurrentCamera;

local character = game.Players.LocalPlayer.CharacterAdded:Wait();
local hrp = character:WaitForChild("HumanoidRootPart");
local humanoid = character:WaitForChild("Humanoid");
local animate = character:WaitForChild("Animate");

while (not character.Parent) do character.AncestryChanged:Wait(); end
local idleAnim = humanoid:LoadAnimation(script:WaitForChild("IdleAnim"));
local moveAnim = humanoid:LoadAnimation(script:WaitForChild("MoveAnim"));
local RunAnim = humanoid:LoadAnimation(script:WaitForChild("RunAnim"));
local lastAnim = idleAnim;

local bodyGyro = Instance.new("BodyGyro");
bodyGyro.maxTorque = Vector3.new(1, 1, 1)*10^6;
bodyGyro.P = 10^6;

local bodyVel = Instance.new("BodyVelocity");
bodyVel.maxForce = Vector3.new(1, 1, 1)*10^6;
bodyVel.P = 10^4;

local Attach = Instance.new("Attachment")
local Attack2 = Attach:Clone()

local isFlying = false;
local movement = {forward = 0, backward = 0, right = 0, left = 0};
local mouse = game.Players.LocalPlayer:GetMouse()
local function Running(Key ,gameprocesed)
	if hrp:FindFirstChild("BodyVelocity") then
	if Key.KeyCode == Enum.KeyCode.LeftShift and gameprocesed == false then
		character.Humanoid.WalkSpeed = 40
		script.Assets.FormAura:Clone().Parent = hrp
		local trail = script.Assets.Trail:Clone()
		local part = script.Assets.Effect:Clone()
		part.Parent = hrp
			part.CFrame = hrp.CFrame
			part.ParticleEmitter.Parent = Attach
		part.Weld.Part1 = hrp
		trail.Attachment0 = Attach
		trail.Attachment1 = Attack2
		trail.Parent = hrp
		Attach.Parent = hrp
		Attack2.Parent = character.LowerTorso
		RunAnim:Play()
		end
	end
end
local function StopRun(Key, Gameprocesed)
	if hrp:FindFirstChild("BodyVelocity") then
	if Key.KeyCode == Enum.KeyCode.LeftShift and Gameprocesed == false then
		character.Humanoid.WalkSpeed = 16
		hrp:FindFirstChild("FormAura"):Destroy()
		hrp.Effect:Destroy()
		character.LowerTorso.Attachment.Parent = nil
		hrp.Attachment.Parent = nil
		hrp.Trail:Destroy()
		RunAnim:Stop()
		lastAnim:Play()
		end
	end
end
local function setFlying(flying)
	isFlying = flying;
	bodyGyro.Parent = isFlying and hrp or nil;
	bodyVel.Parent = isFlying and hrp or nil;
	bodyGyro.CFrame = hrp.CFrame;
	bodyVel.Velocity = Vector3.new();
	animate.Disabled = isFlying;
	if (isFlying) then
		lastAnim = idleAnim;
		lastAnim:Play();
	else
		lastAnim:Stop();
	end
end

local function onUpdate(dt)
	if (isFlying) then
		local cf = mouse.Hit;
		local direction = cf.rightVector*(movement.right - movement.left) + cf.lookVector*(movement.forward - movement.backward);
		if (direction:Dot(direction) > 0) then
			direction = direction.unit;
		end
		bodyGyro.CFrame = cf;
		bodyVel.Velocity = direction * humanoid.WalkSpeed * 4;
	end
end
	
local function onKeyPress(input, gameProcessedEvent)
	if input.KeyCode == Enum.KeyCode.F and gameProcessedEvent == false then
		if (not humanoid or humanoid:GetState() == Enum.HumanoidStateType.Dead) then
				return;
		end
		for i, v in pairs(humanoid:GetPlayingAnimationTracks()) do
			v:Stop()
		end
		setFlying(not isFlying)
	end
end

local function movementBind(actionName, inputState, inputObject)
	if (inputState == Enum.UserInputState.Begin) then
		movement[actionName] = 1;
	elseif (inputState == Enum.UserInputState.End) then
		movement[actionName] = 0;
	end
	if (isFlying) then
		local isMoving = movement.right + movement.left + movement.forward + movement.backward > 0;
		local nextAnim = isMoving and moveAnim or idleAnim;
		if (nextAnim ~= lastAnim) then
			lastAnim:Stop();
			lastAnim = nextAnim;
			lastAnim:Play();
		end
	end
	return Enum.ContextActionResult.Pass;
end

game:GetService("UserInputService").InputBegan:Connect(onKeyPress)
game:GetService("UserInputService").InputBegan:Connect(Running)
game:GetService("UserInputService").InputEnded:Connect(StopRun)
game:GetService("ContextActionService"):BindAction("forward", movementBind, false, Enum.PlayerActions.CharacterForward);
game:GetService("ContextActionService"):BindAction("backward", movementBind, false, Enum.PlayerActions.CharacterBackward);
game:GetService("ContextActionService"):BindAction("left", movementBind, false, Enum.PlayerActions.CharacterLeft);
game:GetService("ContextActionService"):BindAction("right", movementBind, false, Enum.PlayerActions.CharacterRight);
game:GetService("RunService").RenderStepped:Connect(onUpdate)
